{
    "fibonacci": "def Fibonacci(n:int)-> int:\n    if n==1:\n        fibonacci = 0\n    elif n==2:\n        fibonacci = 1\n    else:\n        fibonacci = Fibonacci(n-1) + Fibonacci(n-2)\n    return fibonacci",
    "palindrome": "def palindrom(s:str)-> bool:\n    if len(s) <= 1:\n        return True\n    else:\n        return s[0] == s[-1] and palindrom(s[1:-1])",
    "even": "def evenOdd(n:int)-> str:\n    if n == 0:\n        return \"even\"\n    elif n == 1:\n        return \"odd\"\n    else:\n        return evenOdd(n-2)",
    "factorial": "def factorial(n:int)-> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
    "sum": "def sum(n:int)-> int:\n    if n == 0:\n        return 0\n    else:\n        return n + sum(n-1)",
    "power": "def power(n:int, m:int)-> int:\n    if m == 0:\n        return 1\n    else:\n        return n * power(n, m-1)",
    "gcd": "def gcd(n:int, m:int)-> int:\n    if m == 0:\n        return n\n    else:\n        return gcd(m, n%m)",
    "lcm": "def lcm(n:int, m:int)-> int:\n    return n * m / gcd(n, m)",
    "prime": "def prime(n:int)-> bool:\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True",
    "primeFactorization": "def primeFactorization(n:int)-> list:\n    if prime(n):\n        return [n]\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return [i] + primeFactorization(n/i)"
  }
  